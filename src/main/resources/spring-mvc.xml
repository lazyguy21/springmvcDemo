<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 指定自己定义的validator -->
    <mvc:annotation-driven validator="validator"/>
    <!--<mvc:annotation-driven validator="globalValidator"/>-->

    <!-- 指定自己定义的validator -->
    <mvc:annotation-driven validator="validator"/>

    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <!--<property name="validationMessageSource" ref="messageSource"/>-->
    </bean>

    <!--&lt;!&ndash; 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） &ndash;&gt;-->
    <!--<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">-->
        <!--<property name="basenames">-->
            <!--<list>-->
                <!--&lt;!&ndash; 在web环境中一定要定位到classpath 否则默认到当前web应用下找  &ndash;&gt;-->
                <!--<value>classpath:messages</value>-->
                <!--<value>classpath:org/hibernate/validator/ValidationMessages</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="useCodeAsDefaultMessage" value="false"/>-->
        <!--<property name="defaultEncoding" value="UTF-8"/>-->
        <!--<property name="cacheSeconds" value="60"/>-->
    <!--</bean>-->


    <!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->

    <!-- spring自动扫描注解的组件 -->
    <context:component-scan base-package="com.cddaka.springmvcDemo" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>



    <!--<mvc:annotation-driven conversion-service="conversionService">-->
        <!--<mvc:message-converters>-->
            <!--<ref bean="stringHttpMessageConverter"/>-->
            <!--<ref bean="fastJsonHttpMessageConverter"/>-->
        <!--</mvc:message-converters>-->


    <!--</mvc:annotation-driven>-->

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/pages"
          p:suffix=".jsp"/>

    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <!--<bean class="com.xiaomaihd.zfengcheadmin.util.spring.converters.OrderStatusConverter"/>-->
            </set>
        </property>
    </bean>
    <mvc:view-controller path="/" view-name="redirect:account/login.jsp"/>
    <!--<mvc:view-controller path="/" view-name="redirect:/pages"/>-->

    <!--<mvc:resources mapping="/assets/**/" location="/assets/"/>-->
    <!--<mvc:resources mapping="/css/**/" location="/css/"/>-->
    <!--<mvc:resources mapping="/fonts/**/" location="/fonts/"/>-->
    <!--<mvc:resources mapping="/img/**/" location="/img/"/>-->
    <!--<mvc:resources mapping="/plug/**/" location="/plug/"/>-->

    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="stringHttpMessageConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg value="UTF-8" index="0"/>
        <!-- 避免出现乱码 -->
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>



    <!-- 文件上传配置 -->
    <!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> <property name="defaultEncoding"> <value>UTF-8</value> </property> <property name="maxUploadSize"> <value>32505856</value> </property> <property name="maxInMemorySize"> <value>4096</value> </property> </bean> -->


    <!--启用aop:这里再声明一次是因为如果要拦截controller，他们的上下文是不一样的-->
    <aop:aspectj-autoproxy/>

    <!-- 页面生成随机验证码 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">no</prop>
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <prop key="kaptcha.textproducer.font.color">red</prop>
                        <prop key="kaptcha.image.width">250</prop>
                        <prop key="kaptcha.textproducer.font.size">90</prop>
                        <prop key="kaptcha.image.height">90</prop>
                        <prop key="kaptcha.session.key">code</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <!--<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">-->
        <!--<property name="config">-->
            <!--<bean class="com.google.code.kaptcha.util.Config">-->
                <!--<constructor-arg>-->
                    <!--<props>-->
                        <!--<prop key="kaptcha.border">yes</prop>-->
                        <!--<prop key="kaptcha.border.color">105,179,90</prop>-->
                        <!--<prop key="kaptcha.textproducer.font.color">blue</prop>-->
                        <!--<prop key="kaptcha.image.width">118</prop>-->
                        <!--<prop key="kaptcha.image.height">40</prop>-->
                        <!--<prop key="kaptcha.textproducer.font.size">30</prop>-->
                        <!--<prop key="kaptcha.noise.color">blue</prop>-->
                        <!--<prop key="kaptcha.session.key">code</prop>-->
                        <!--<prop key="kaptcha.textproducer.char.length">4</prop>-->
                        <!--<prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>-->
                        <!--<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>-->
                    <!--</props>-->
                <!--</constructor-arg>-->
            <!--</bean>-->
        <!--</property>-->
    <!--</bean>-->
</beans>
